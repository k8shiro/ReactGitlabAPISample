{"version":3,"sources":["CodeView.js","GitlabFileList.js","GitlabAPIView.js","App.js","serviceWorker.js","index.js"],"names":["CodeView","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","code","getCode","bind","assertThisInitialized","path","_this2","apiURL","gitlab","repositoyID","encodeURIComponent","console","log","fetch","then","response","text","responseText","setState","prevProps","prevState","snapshot","isEqual","codePath","react_default","a","createElement","style","textAlign","default_highlight","Component","GitlabFileList","tree","defaultPath","getFileTree","createFileElement","json","responseJson","data","_this3","type","TableRow","TableCell","size","Folder_default","align","Link","component","onClick","name","TextFields_default","Grid","container","spacing","item","xs","height","window","innerHeight","overflowX","Table","TableBody","map","src_CodeView","GitlabAPIView","defaultRepositoyURL","repositoyURL","repositoy","split","pathWithNamespace","slice","id","getRepositoryID","event","target","value","FormControl","fullWidth","InputLabel","Input","defaultValue","onChange","gitlabURLChanged","src_GitlabFileList","App","className","src_GitlabAPIView","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.aee11640.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport isEqual from 'lodash/isEqual';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\n\nclass CodeView extends Component {\n  constructor(props){\n    super(props);\n\n    this.state = {\n      code: ''\n    }\n\n    this.getCode = this.getCode.bind(this);\n  }\n\n\n  getCode(path){\n    const gitlab = this.props.gitlab;\n    const repositoyID = this.props.repositoyID\n    const encodedPath = encodeURIComponent(path)\n    const apiURL = 'https://' + gitlab + '/api/v4/projects/' + repositoyID + '/repository/files/'+ encodedPath + '/raw?ref=master';\n\n    console.log(apiURL)\n\n    fetch(apiURL)\n      .then((response) => response.text())\n      .then((responseText) => {\n        this.setState({ code: responseText })\n      })\n  }\n\n componentDidUpdate(prevProps, prevState, snapshot) {\n    if(isEqual(prevProps, this.props)) return;\n    console.log(this.props)\n    this.props.codePath && this.getCode(this.props.codePath)\n  }\n\n  render() {\n    return (\n      <div style={{textAlign: 'left'}}>\n        <SyntaxHighlighter>{this.state.code}</SyntaxHighlighter>\n      </div>\n    )\n  }\n}\n\nexport default CodeView\n\n","import React, { Component } from 'react'; \nimport Link from '@material-ui/core/Link';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport isEqual from 'lodash/isEqual';\nimport FolderIcon from '@material-ui/icons/Folder';\nimport TextFieldsIcon from '@material-ui/icons/TextFields';\nimport Grid from '@material-ui/core/Grid';\n\nimport CodeView from \"./CodeView.js\"\n\nclass GitlabFileList extends Component {\n  constructor(props){\n    super(props);\n\n    this.state = {\n      tree: [],\n      codePath: null\n    }\n\n    this.defaultPath = '/';\n    this.getFileTree = this.getFileTree.bind(this);\n    this.createFileElement = this.createFileElement.bind(this);\n  }\n\n  getFileTree (path) {\n    const gitlab = this.props.gitlab;\n    const repositoyID = this.props.repositoyID\n    const apiURL = 'https://' + gitlab + '/api/v4/projects/' + repositoyID + '/repository/tree?per_page=1000&path=' + path;\n\n    fetch(apiURL)\n      .then((response) => response.json())\n      .then((responseJson) => {\n        console.log(responseJson)\n        this.setState({ tree: responseJson })\n      })\n  }\n\n\n  createFileElement(data) {\n    if (data.type == 'tree') {\n      return (\n        <TableRow>\n          <TableCell size=\"small\"><FolderIcon /></TableCell>\n          <TableCell align=\"left\">\n            <Link component=\"button\" onClick={() => this.getFileTree(data.path) }> {data.name} </Link>\n          </TableCell>\n        </TableRow>\n      )\n    } else {\n      return (\n        <TableRow>\n          <TableCell size=\"small\"><TextFieldsIcon /></TableCell>\n          <TableCell align=\"left\">\n            <Link component=\"button\" onClick={() => this.setState({codePath: data.path}) }> {data.name} </Link>\n          </TableCell>\n        </TableRow>\n      )\n    }\n  }\n\n  componentDidMount() {\n    this.getFileTree(this.defaultPath);\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if(isEqual(prevProps, this.props)) return;\n    this.getFileTree(this.defaultPath);\n  }\n\n  render() {\n    const tree = this.state.tree\n    console.log(this.props)\n    console.log('tree')\n    console.log(tree)\n    return (\n      <div>\n        <Grid container spacing={3}>\n          <Grid item xs={3} style={{height: window.innerHeight, overflowX: 'auto'}}>\n            <Table>\n              <TableBody>\n                {tree.map(this.createFileElement)}\n              </TableBody>\n            </Table>\n          </Grid>\n          <Grid item xs={9}>\n            <CodeView gitlab={this.props.gitlab} repositoyID={this.props.repositoyID} codePath={this.state.codePath}/>\n          </Grid>\n        </Grid>\n      </div>\n    )\n  }\n}\n\nexport default GitlabFileList\n","import React, { Component } from 'react';\nimport FormControl from '@material-ui/core/FormControl';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Grid from '@material-ui/core/Grid';\n\nimport GitlabFileList from \"./GitlabFileList.js\"\n\n\nclass GitlabAPIView extends Component {\n  constructor(props){\n    super(props);\n\n    this.state = {\n      gitlab: null,\n      repositoyID: null\n    };\n\n    this.defaultRepositoyURL = \"https://gitlab.com/gitlab-org/gitlab-ce\";\n  }\n\n  getRepositoryID (repositoyURL) {\n    const repositoy = repositoyURL.split('/');\n    const gitlab = repositoy[2]\n    const pathWithNamespace = encodeURIComponent(repositoy.slice(-2)[0] + '/' + repositoy.slice(-2)[1])\n\n    this.setState({ gitlab: gitlab});\n\n    const apiURL = 'https://' + gitlab + '/api/v4/projects/' + pathWithNamespace\n    \n    fetch(apiURL)\n      .then((response) => response.json())\n      .then((responseJson) => {\n        if (responseJson.id) this.setState({ repositoyID: responseJson.id })\n      })\n  }\n\n  componentDidMount() {\n    this.getRepositoryID (this.defaultRepositoyURL)\n  }\n\n  gitlabURLChanged(event) {\n    const repositoyURL = event.target.value\n    this.getRepositoryID(repositoyURL)\n  }\n\n\n  render() {\n    const gitlab = this.state.gitlab\n    const repositoyURL = this.defaultRepositoyURL;\n    const repositoyID = this.state.repositoyID;\n\n    return (\n      <div>\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            <FormControl fullWidth={true}>\n              <InputLabel>Gitlab Repository URL</InputLabel>\n              <Input defaultValue={repositoyURL} onChange={this.gitlabURLChanged.bind(this)}/>\n            </FormControl>\n          </Grid>\n          <Grid item xs={12}>\n            {repositoyID && <GitlabFileList gitlab={gitlab} repositoyID={repositoyID}/>}\n          </Grid>\n        </Grid>\n      </div>\n    )\n  }\n}\n\nexport default GitlabAPIView\n\n\n","import React from 'react';\nimport './App.css';\nimport GitlabAPIView from \"./GitlabAPIView.js\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GitlabAPIView />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}